[{"categories":["Python","Flask"],"content":"1st January 2020 was the official sunset date of Python 2. At NewsCred (now Welcome) we had a bunch of services written in Python 2 that we wanted to migrate to Python 3 as soon as we can, since the sunset date was approaching. In late November 2019, my team (Public API) took the first initiative to migrate one Flask service from Python 2.7.9 to 3.8.0. As you can guess, it didn’t go butter smooth, and I’m here to tell the tale.\nThat big migration PR got reviewed by 4 experienced engineers. We had good test coverage. We created integration tests from log replay. We did extensive manual testing before production deployment. But as soon as it hit the production, we started getting PagerDuty alerts!\nA lot of API requests were getting HTTP 500 responses. Without much investigation, out of instinct we reverted the migration PR. Though the frequency went down by a big margin, we were still getting some 500s.\nHere’s Why! From the logs we saw, after the migration PR deployment we started getting the following exception:\n... ... File \"/.../werkzeug/contrib/cache.py\", line 631, in get return self.load_object(self._client.get(self.key_prefix + key)) File \"/.../werkzeug/contrib/cache.py\", line 621, in load_object return pickle.loads(value[1:]) UnicodeDecodeError: 'ascii' codec can't decode byte 0xe2 in position 180662: ordinal not in range(128) After the deployment of the revert PR, we got the following exception:\n... ... File \"/...werkzeug/contrib/cache.py\", line 598, in get return self.load_object(self._client.get(self.key_prefix + key)) File \"/.../werkzeug/contrib/cache.py\", line 588, in load_object return pickle.loads(value[1:]) ValueError: unsupported pickle protocol: 4 So the underlying issue was with pickle not being able to de-serialize the cached object. Let’s dive a little deeper.\nCache Setup We used Redis for response caching in that service. The setup looked something like this:\n1 2 3 4 5 6 7  from werkzeug.contrib.cache import RedisCache cache = RedisCache(host=config.CACHE_HOST, port=config.CACHE_PORT) cache.set(key, value, timeout=config.CACHE_TIMEOUT) value = cache.get(key)   So we used the RedisCache client from the werkzeug. (Underneath it uses the redis-py, this information is not relevant here though).\nWhere Things Went Wrong RedisCache uses pickle to serialize objects before writing to redis:\n1 2 3 4 5 6 7 8  def dump_object(self, value): \"\"\"Dumps an object into a string for redis. By default it serializes integers as regular string and pickle dumps everything else. \"\"\" t = type(value) if t in integer_types: return str(value).encode('ascii') return b'!' + pickle.dumps(value)   And de-serialize objects after reading from redis:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  def load_object(self, value): \"\"\"The reversal of :meth:`dump_object`. This might be called with None. \"\"\" if value is None: return None if value.startswith(b\"!\"): try: return pickle.loads(value[1:]) except pickle.PickleError: return None try: return int(value) except ValueError: # before 0.8 we did not have serialization. Still support that. return value   Implementation of the default pickle protocol in Python 2.7.9:\n1 2  if protocol is None: protocol = 0   And the implementation of the default pickle protocol in Python 3.8.0:\n1 2  if protocol is None: protocol = DEFAULT_PROTOCOL   The value of the DEFAULT_PROTOCOL:\n1  DEFAULT_PROTOCOL = 4   And there’s a docstring telling:\nThe optional *protocol* argument tells the pickler to use the given protocol; supported protocols are 0, 1, 2, 3 and 4. The default protocol is 4. It was introduced in Python 3.4, it is incompatible with previous versions. As the default protocol of pickle got changed from Python 2 to 3, the cache objects those were serialized (set) using Python 2, couldn’t be de-serialized (get) using Python 3 due to the unicode conversion error.\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xe2 in position 180662: ordinal not in range(128) Thus we were getting that influx of 500s after the migration PR deployment.\nWhile the service was running in Python 3, some data got cached, after reverting to Python 2, pickle couldn’t read those cached data since protocol 4 was unknown to it, and we were getting some 500s.\nValueError: unsupported pickle protocol: 4 Why This Wasn’t detected Before Deployment  Though we had good test coverage, caching scenarios were mocked in the unit tests. The subset of data we used for integration tests didn’t have any unicode entry. We didn’t test manually with unicode data.  Hence it caught us off guard!\nHow We Solved the Issue We re-reverted the revert PR, and instantly after the deployment, we deleted the already cached data from redis. Since most of the consumers of that service were kind of background workers with high timeouts, performance spike from the mass cache invalidation didn’t cause much trouble.\nAround 2 years after the incident, when I look back, definitely can realize - this kind of incidents teach us invaluable lessons!\n","description":"","tags":["Python","Flask","cache","redis","pickle"],"title":"Incident on Python 2 to 3 Migration: Redis Cache and Pickle","uri":"/incident-on-python-2-to-3-migration-redis-cache-and-pickle/"},{"categories":["Django","Python"],"content":"More than a year ago I wrote the post: Auto generating unique slug in Django. There we considered a model named Article, which had title and slug fields. We had overridden the save method of that model to automatically save the unique slug which had been generated by our written _get_unique_slug model method. But what will happen if we want to auto generate unique slug for tens or even hundreds of models? Do the same for each of the models? No way! So, in this post, we will know how we can achieve that through a generic approach. To continue reading this post, you don’t necessarily need to read that previous post, but recommended.\nThe Basics What is slug? Consider the URL of this post: /auto-generating-unique-slug-django-generic-approach/ . Here the bold part of the URL is called slug.\nSuppose we have tens of models including the Author:\n1 2 3 4 5 6 7 8 9  from django.db import models class Author(models.Model): name = models.CharField(max_length=120) slug = models.SlugField(max_length=140, unique=True) def __str__(self): return self.name   Based on the name filed, slug filed should be generated. If the name of our first Author is ‘John Doe’, the slug should be ‘john-doe’. If the name of our second Author is also ‘John Doe’, the slug should be ‘john-doe-1’. And if the name of our third Author is ‘John Doe’ again, the slug should be ‘john-doe-2’. And so on.\nThe Solution Let’s create a file named utils.py in the app directory and write this code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  from django.utils.text import slugify def get_unique_slug(model_instance, slugable_field_name, slug_field_name): \"\"\" Takes a model instance, sluggable field name (such as 'title') of that model as string, slug field name (such as 'slug') of the model as string; returns a unique slug as string. \"\"\" slug = slugify(getattr(model_instance, slugable_field_name)) unique_slug = slug extension = 1 ModelClass = model_instance.__class__ while ModelClass._default_manager.filter( **{slug_field_name: unique_slug} ).exists(): unique_slug = '{}-{}'.format(slug, extension) extension += 1 return unique_slug   As the docstring says, the get_unique_slug takes a django model instance for the first argument, sluggable field name such as ‘name’ (based on which the slug will be generated) of that model as string for the second argument and slug field name such as ‘slug’ of the model as string for the third argument. And it returns a unique slug as string.\nLet’s break down the code a bit. At line 10, slugify (django.utils.text.slugify) takes a string like ‘John Doe’ as argument and returns a string like ‘john-doe’. And we are accessing the sluggable field of the model instance using getattr. At line 13, we are getting the model class from the model instance using class.\nTake a closer look at line 15-19. Until we get a unique slug, we append the current slug string with an extension number starting from 1; such as ‘john-doe-1’, ‘john-doe-2’…. For accessing the model manager (usually objects) we are using _default_manager. Line 15 might look a bit tricky, in short, **{slug_field_name: unique_slug} works like something similar to slug='john-doe'. To understand this clearly, we need to know about how **kwargs works in python and how django model unpacks it. As this is beyond the scope of this post, I’m not discussing it here.\nLet’s update our models.py:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  from django.db import models from .utils import get_unique_slug class Author(models.Model): name = models.CharField(max_length=120) slug = models.SlugField(max_length=140, unique=True) def save(self, *args, **kwargs): if not self.slug: self.slug = get_unique_slug(self, 'name', 'slug') super().save(*args, **kwargs) def __str__(self): return self.name   Here we are overriding the save method, if the slug is already not set, we are setting it using the get_unique_slug function.\nYou can also consider to use the pre_save signal instead of overriding the save method.\nBoom! all done, enjoy!\n","description":"","tags":["Django","Python","slug"],"title":"Auto generating unique slug in Django: a generic approach","uri":"/auto-generating-unique-slug-django-generic-approach/"},{"categories":["Programming","Python"],"content":"“ডেকরেটর! ওই যে বিভিন্ন অনুষ্ঠানের সাজ সজ্জা করে মানে ডেকরেট করে….. তো পাইথনে আবার তাদের কি কাজ!”\nপোস্টের টাইটেল দেখে যদি আপনার মনে এরকম প্রশ্নের উদয় হয় তাহলেও দোষের কিছু নেই। পাইথনে ডেকরেটর কিছুটা এডভান্স আর কমপ্লেক্স টপিক। তবে চিন্তা নেই, এই পোস্টে আমরা একটু সহজ ভাবে, ধাপে ধাপে জানার চেষ্টা করবো পাইথনে ডেকরেটর জিনিষটা কী, কীভাবে কাজ করে আর কীভাবেই বা ব্যাবহার করে।\nঠিক ঠাক ভাবে বললে, ডেকরেটর হল এক ধরনের callable যা অন্য callable এর ফাংশনালিটিকে মডিফাই করে। আরেকটু সহজ করে বললে, ডেকরেটর হল এক ধরনের ফাংশন যা অন্য ফাংশনের ফাংশনালিটিকে মডিফাই করে। [ডেকরেটর ক্লাসও হয়, তবে এ পোস্টে সেটা আলোচনা করবো না।] তো ধাপে ধাপে শুরু করা যাক। আমি ধরে নিচ্ছি ভ্যারিয়েবলের স্কোপ রেজ্যুলেশন সম্পর্কে আমাদের মোটামুটি ভাল ধারনা আছে, তাই এ সম্পর্কে আর বাড়তি কিছু লিখলাম না।\nফাংশনের কারিকুরি এই কোড ব্লক টা দেখি:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  def hello(): print(\"Hello World!\") hello() # output: Hello World! hi = hello # interesting! print(hi) # output: \u003cfunction hello at 0x7ff330b412f0\u003e hi() # output: Hello World!   8 নম্বর লাইন থেকে কোডটা ইন্টারেস্টিং হওয়া শুরু করেছে। আমরা জানি পাইথনে সব কিছুই এক একটা অবজেক্ট। ফাংশনও। এই লাইনে আমরা hello কে hi তে এসাইন করেছি। লক্ষনীয়, এখানে hello এর পাশে () (ব্র্যাকেট/প্যারেন্থেসিস) দেই নি। অর্থাৎ এখানে hello ফাংশনটি এক্সিকিউট বা কল হয় নি। 10 নম্বর লাইনের আউটপুট দেখলে ব্যাপারটা আরো পরিষ্কার হবে। আর 13 নম্বর লাইনে hi কে কল করা হয়েছে, আউটপুট পেয়েছি ঠিক hello এর মত।\nফাংশনের ভেতর ফাংশন! হ্যা, পাইথনে আমরা ফাংশনের ভেতর ফাংশন ডিফাইন করতে পারি। অন্যভাবে বললে আমরা নেস্টেড ফাংশন বানাতে পারি। এরকম:\n1 2 3 4 5 6 7 8 9 10 11  def hello(): print(\"Inside hello\") def nested(): print(\"Inside nested\") nested() print(\"Inside hello again\") hello()   আউটপুট:\nInside hello\rInside nested\rInside hello again\rআরেকটি কোড ব্লক দেখি:\n1 2 3 4 5 6 7 8 9 10  def count(value): def increment(): return value + 1 print(\"Incremented value of {} is {}\".format(value, increment())) count(5) # output: Incremented value of 5 is 6   শুরুতেই লিখেছিলাম ভ্যারিয়েবলের স্কোপ রেজ্যুলেশন সম্পর্কে লিখবো না। কোডটা একটু ভাল মত লক্ষ্য করলেই আশা করি বুঝতে পারবেন।\nফাংশন থেকে ফাংশন রিটার্ন! ফাংশন থেকে ইচ্ছা করলে আমরা ফাংশন রিটার্নও করতে পারি! এই কোডটা দেখলে ব্যাপারটা পরিষ্কার হবে:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  def hello(): def nested(): print(\"Inside nested\") return nested hi = hello() print(hi) # output: \u003cfunction hello.\u003clocals\u003e.nested at 0x7f1ed4e94488\u003e hi() # output: Inside nested   9 নম্বর লাইনে hello() কে কল করায় এটা nested কে রিটার্ন করেছে, তা এসাইন হয়েছে hi তে। পূর্বের কোড ব্লক গুলো ফলো করলে এটি সহজেই বোঝা যাবে।\nআরেকটি কোড ব্লক দেখি:\n1 2 3 4 5 6 7 8 9 10  def count(value): def increment(n): return value + n return increment counter = count(5) print(counter(1)) # Guess the output!   কি, আউটপুট গেস করেছেন? এটা আর এক্সপ্লেইন করবো না। আউটপুট হবে 6।\nফাংশনের আর্গুমেন্ট/প্যারামিটার হিসেবে ফাংশন সরাসরি একটা কোড স্নিপেট দেখে ফেলি:\n1 2 3 4 5 6 7 8 9 10  def hello(): print(\"Hello World!\") def hi(func): print(\"Hi!\") func() hi(hello)   এখানে hi ফাংশনের প্যারামিটার হিসেবে hello কে পাস করা হয়েছে। hi এর ভেতর hello কল হয়েছে। আউটপুট হবে এরকম:\nHi!\rHello World!\rডেকরেটর এখন হচ্ছে মূল বিষয়, ডেকরেটর। আমরা আগেই জেনেছি, ডেকরেটর হচ্ছে এমন ফাংশন যা অন্য ফাংশনের ফাংশনালিটি মডিফাই করে। এখন তাহলে একটু সাজানো গুছানো উদাহরণ দেখে নেই:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  def mydecorator(func): def wrapper(): print(\"Before calling func()\") func() print(\"After calling func()\") return wrapper def hello(): print(\"Hello World!\") hello = mydecorator(hello) hello()   এখানে mydecorator ফাংশনটি প্যারামিটার হিসেবে আরেকটি ফাংশন এক্সপেক্ট করছে। এর মধ্যকার wrapper ফাংশনটিতে প্যারামিটারে পাওয়া ফাংশন কল করার আগে এবং পরে কিছু কাজ হচ্ছে। আর mydecorator থেকে wrapper কে রিটার্ন করা হচ্ছে। ১৫ নম্বর লাইনে mydecorator কে hello প্যারামিটার দিয়ে কল করা হয়েছে। রিটার্ন ভ্যালু এসাইন করা হয়েছে আবার hello তে। অর্থাৎ mydecorator এর মাধ্যমে hello মডিফাই হয়েছে। [প্রয়োজনে আবার খেয়াল করুন।] সব শেষ লাইনে hello() কল হয়েছে। আউটপুট হবে এরকম:\nBefore calling func()\rHello World!\rAfter calling func()\rনাম এবং কাজ দেখে বোঝাই যাচ্ছে mydecorator হচ্ছে আমাদের কাঙ্খিত সেই ডেকরেটর।\nতবে ডেকরেটর ব্যাবহারের সুন্দর একটি সিনট্যাক্স আছে, @। উপরের কোড কে আমরা সুন্দর করে এভাবে লিখতে পারি:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  def mydecorator(func): def wrapper(): print(\"Before calling func()\") func() print(\"After calling func()\") return wrapper @mydecorator def hello(): print(\"Hello World!\") hello()   অর্থাৎ, hello = mydecorator(hello) এই লাইনের পরিবর্তে আমরা hello ফাংশনটি ডিফাইনের ঠিক আগে @mydecorator লিখেছি। পূর্বের মত একই কাজ হবে।\nবাস্তব উদাহরণ এবার একটি বাস্তব উদাহরণ দেখা যাক। মনে করি আমাদের একটি ফাংশন আছে, আমরা চাই যখন এটি কল হবে ঠিক ওই সময় যেন লগ হিসবে একটা ফাইলে থাকে। এর সমাধান দেখে নেয়া যাক:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  from datetime import datetime from time import sleep def log(func): def wrapper(): with open('log.txt', 'a') as file: now = datetime.now().strftime(\"%I:%M:%S%p on %d%B, %Y\") file.write(now + '\\n') func() return wrapper @log def hello(): print('Hello World!') for i in range(3): hello() sleep(5)   এই প্রোগ্রাম রান করলে কারেন্ট ওয়ার্কিং ডিরেক্টরিতে log.txt নামের একটা ফাইল তৈরি হবে, সেটি খুললে hello() এক্সিকিউট হওয়ার সময় গুলো পাওয়া যাবে।\nপ্যারামিটার/আর্গুমেন্ট সহ ডেকরেটর যদি log ডেকরেটর টায় প্যারামিটার হিসেবে ফাইলের নাম দিয়ে দেয়া যেত, log.txt এর পরিবর্তে আমাদের প্রয়োজন মত নাম, তাহলে সুবিধা হতো না? হ্যা, ডেকরেটরে প্যারামিটার/আর্গুমেন্ট পাস করা সম্ভব। এজন্য আমাদের ডেকরেটরকে আরেকটা ফাংশনের মধ্যে নেস্টেড আকারে রাখা লাগবে। এরকম:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  from datetime import datetime from time import sleep def log(filename='log.txt'): def log_decorator(func): def wrapper(): with open(filename, 'a') as file: now = datetime.now().strftime(\"%I:%M:%S%p on %d%B, %Y\") file.write(now + '\\n') func() return wrapper return log_decorator @log(filename='history.txt') def hello(): print('Hello World!') for i in range(3): hello() sleep(5)   এখন আমাদের লগ history.txt খুললে পাওয়া যাবে। আর যদি @log এ কোন প্যারামিটার পাস না করা হয়, তাহলে ডিফল্ট ভাবে log.txt তে লগ থাকবে।\nএইত! এই ছিল পাইথনের ডেকরেটর‍্স‍ কনসেপ্ট। যদিও যেভাবে উপস্থাপন করতে চেয়েছিলাম সেভাবে পারি নি, তারপরও আশা করছি অপেক্ষাকৃত নতুনেরা উপকৃত হবে। সামনে কোন এক সময় ক্লাস ডেকরেটর নিয়ে লিখবো ইনশাআল্লাহ।\n","description":"","tags":["ডেকরেটর","পাইথন"],"title":"পাইথন ডেকরেটর‍্স‍","uri":"/python-decorator-bangla/"},{"categories":["Python"],"content":"আসলে লেখাটির সঠিক শিরোনাম কি হবে, কিছুক্ষণ চিন্তা করেও যখন ঠিক করতে পারছিলাম না, ঠিক করলাম আর চিন্তা করে সময় নষ্ট না করে মূল বিষয়টা লিখে ফেলি।\nআচ্ছা, একটা ফাইল ক্রিয়েট করি email.py নামে। এর ভেতর শুধুমাত্র এই দুটি লাইন লিখে সেভ করি:\n1 2 3  import requests print('I have been executed!')   এখন ফাইলটা রান করি:\npython3 email.py কি দেখলেন! নিশ্চই পাইথন এরকম বিদঘুটে ধরনের এক্সেপশন থ্রো করেছে:\nTraceback (most recent call last): File \"email.py\", line 1, in \u003cmodule\u003e import requests File \"/usr/lib/python3/dist-packages/requests/__init__.py\", line 58, in \u003cmodule\u003e from . import utils File \"/usr/lib/python3/dist-packages/requests/utils.py\", line 12, in \u003cmodule\u003e import cgi File \"/usr/lib/python3.5/cgi.py\", line 39, in \u003cmodule\u003e from email.parser import FeedParser ImportError: No module named 'email.parser'; 'email' is not a package আচ্ছা এখন ফাইলটাকে রিনেম করি a.py নামে।\nএখন আবার রান করি:\npython3 a.py এখন আউটপুট এসেছে এরকম:\nI have been executed! কিন্তু কেন এ বৈষম্য!\nrequests মডিউলটার মধ্যে email নামের আরেকটা মডিউলকে কল করা হয়েছে, যা পাইথন স্ট্যান্ডার্ড লাইব্রেরির অংশ। এখন পাইথন নিয়ম অনুযায়ী কোন মডিউল প্রথমে করেন্ট ওয়ার্কিং ডিরেক্টরিতে খোঁজে, এরপর অন্য যায়গায়। যখন আমাদের ফাইলের নাম email.py ছিল, তখন পাইথন এটাকেই স্ট্যান্ডার্ড লাইব্রেরির email মডিউল ধরে নিয়েছে। তাই ওরকম বিদঘুটে এক্সেপশন রেইজ হয়েছে। আবার রিনেম করে a.py করার পর সব ঠিক ঠাক।\nপাইথনের মডিউল লুক আপ অর্ডার দেখতে ইন্টারএক্টিভ শেল চালু করে এরকম লিখুন:\n\u003e\u003e\u003e import sys \u003e\u003e\u003e \u003e\u003e\u003e sys.path সুতরাং, আমাদের পাইথন ফাইল নামকরণের সময় একটু সতর্ক থাকা লাগবে, চেষ্টা করতে হবে তা যেন অন্য কোন লাইব্রেরির নামে না হয়।\nআর জটিলতা এড়ানোর জন্য সম্পূর্ণ লেখায় প্যাকেজ এবং মডিউল উভয়কেই মডিউল বলা হয়েছে। আশা করি ব্যাপারটি ক্ষমা সুন্দর দৃষ্টিতে দেখবেন। 🙂\n","description":"","tags":["পাইথন","মডিউল"],"title":"পাইথনে ফাইলের নাম এবং মডিউল নিয়ে বিভ্রাট","uri":"/python-file-name-and-module-conflict-bangla/"},{"categories":["Object Oriented Programming","Programming","Python"],"content":"কিছু ক্ষেত্রে দেখা যায় আমাদের এমন একটি ক্লাস দরকার পরছে, যার আচরণ হবে পাইথনের কোন বিল্ট-ইন ক্লাসের মত। কিন্তু তাতে আমাদের কাস্টম কিছু ফিচার দরকার। এরকম পরিস্থিতিতে আমরা আমাদের ক্লাস কে পাইথনের বিল্ট-ইন ক্লাস থেকে ইনহ্যারিট করতে পারি। এতে করে ঐ ক্লাস, বিল্ট-ইন ক্লাসের সকল বৈশিষ্ট্য অর্জন করবে, এবং আমরা আমাদের প্রয়োজন মত কাস্টমাইজও করে নিতে পারবো।\nআচ্ছা, এই কোড টুকু দেখি:\n1 2 3 4 5 6 7  class MyList(list): pass numbers = MyList([1, 2, 3, 4]) numbers.append(5) print(numbers)   এখানে আমরা MyList কে পাইথনের বিল্ট-ইন ক্লাস list থেকে ইনহ্যারিট করেছি। MyList এ আর কোন কোড লিখি নি। সুতরাং আমাদের MyList এর অবজেক্ট list এর মত আচরন করবে। 5 নম্বর লাইন লক্ষ্য করি। এখানে MyList ইন্সট্যান্সিয়েট করার সময় প্যারামিটার হিসেবে একটি লিস্ট পাস করেছি, কিন্তু MyList এর মাঝে কোন __init__ মেথড লিখি নি। এখানে MyList এর প্যারেন্ট ক্লাস list এর __init__ মেথড কল হচ্ছে। আবার 6 নম্বর লাইনের append মেথডও একই ভাবে প্যারেন্ট ক্লাস থেকে কল হচ্ছে।\nকোড টি রান করলে আমরা এরকম আউটপুট পাবো:\n[1, 2, 3, 4, 5] আর্থাৎ আমাদের MyList পাইথনের বিল্ট-ইন list এর মতই আচরণ করছে।\nlist এর ইনডেক্স শুরু হয় 0 থেকে। এখন আমরা চাই list এর মত এমন একটি ডেটা স্ট্রাকচার MyList বানাতে, যার ইনডেক্স শুরু হবে 1 থেকে। আর বাকি সব ফিচার একই থাকবে। তাহলে আমরা কোড লিখবো এরকম (Python 3):\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  class MyList(list): def __setitem__(self, index, value): if index == 0: raise IndexError if index \u003e 0: index -= 1 super().__setitem__(index, value) def __getitem__(self, index): if index == 0: raise IndexError if index \u003e 0: index -= 1 return super().__getitem__(index) mylist = MyList(['a', 'b', 'c', 'd', 'e']) mylist[1] = 'apple' mylist[5] = 'orange' print(mylist) print(mylist[1]) print(mylist[5])   MyList এ list এর দুটি ম্যাজিক মেথড __setitem__ এবং __getitem__ অল্টার করেছি। আমরা যখন alist[2] = 5 এরকম কোড লিখি তখন __setitem__ মেথড টি কল হয়। আবার যখন value = alist[2] এরকম কোড লিখি তখন __getitem__ মেথড টি কল হয়।\nএখন আমাদের চাহিদা অনুযায়ী index শুরু হতে হবে 1 থেকে। তাই __setitem__ এবং __getitem__ এর ভেতর ওরকম লজিক লিখেছি। এবং তার পর প্যারেন্ট ক্লাস থেকে সংশ্লিষ্ট মেথড কে কল করেছি (অল্টার করেছি)।\nআউটপুট দেখে নেই:\n['apple', 'b', 'c', 'd', 'orange'] apple orange সুতরাং দেখা যাচ্ছে আমাদের Mylist এর ইনডেক্স 1 থেকেই শুরু হচ্ছে, 0 থেকে নয়। মিশন একমপ্লিশড 😎 ।\nএরকম ভাবে প্রয়োজনে আমরা পাইথনের অন্যান্য বিল্ট-ইন ক্লাস (যেমন dict, tuple ইত্যাদি) থেকেও ইনহ্যারিট করতে পারি।\n","description":"","tags":["Python","অবজেক্ট অরিয়েন্টেড","পাইথন"],"title":"পাইথনে বিল্ট-ইন ক্লাস থেকে ইনহ্যারিটেন্স","uri":"/inheriting-from-built-ins-in-python-bangla/"},{"categories":["Django","Python"],"content":"In this post we are going to know how to generate unique slug in django automatically. So what is slug? Consider the URL of this post: /auto-generating-unique-slug-in-django/ . Here the bold part of the URL is called slug.\nFirst, consider a model Article in which we will generate the unique slug.\n1 2 3 4 5 6 7 8 9 10  from django.db import models class Article(models.Model): title = models.CharField(max_length=120) slug = models.SlugField(max_length=140, unique=True) content = models.TextField() def __str__(self): return self.title   In our model Article we have three fields: title, slug and content. Django provides a built-in model field for slug, SlugField. We will generate the slug based on the title field.\nHow the slug will be generated: If the title of our first article is ‘New article’, the slug will be ‘new-article’. If the title of our second article is also ‘New article’, the slug will be ‘new-article-1’. And if the title of our third article is ‘New article’ again, the slug will be ‘new-article-2’. And so on.\nSo, to do that we have to write code like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  from django.db import models from django.utils.text import slugify class Article(models.Model): title = models.CharField(max_length=120) slug = models.SlugField(max_length=140, unique=True) content = models.TextField() def __str__(self): return self.title def _get_unique_slug(self): slug = slugify(self.title) unique_slug = slug num = 1 while Article.objects.filter(slug=unique_slug).exists(): unique_slug = '{}-{}'.format(slug, num) num += 1 return unique_slug def save(self, *args, **kwargs): if not self.slug: self.slug = self._get_unique_slug() super().save(*args, **kwargs)   Look at the line 22, we override the save() method here. If the slug doesn’t already exist in the instance of Article, we generate it by calling _get_unique_slug() method. I am not explaining the code of _get_unique_slug() method in detail because it is kind of self explanatory. But what slugify() does? Well, if we give a string like ‘The new article title’ to slugify(), it returns ‘the-new-article-title’. Simple.\nYou can also consider to use the pre_save signal instead of overriding the save method.\nThanks for reading this post. Have a nice day!\nYou should consider to read this post as well: Auto generating unique slug in Django: a generic approach.\n","description":"","tags":["Django","Python","slug"],"title":"Auto generating unique slug in Django","uri":"/auto-generating-unique-slug-in-django/"},{"categories":["Django","Python"],"content":"Django is a popular Python web framework. In this tutorial we are going to create a simple feedback system using Python 3 and Django 1.9. It is assumed that you know the basics of django. If not, then please read the django official tutorial first. It is also assumed that you are using python 3 and django 1.9.x is installed (possibly in a virtual environment) in your computer. In this tutorial we will focus mostly on code. In most of the case, things will not be described in depth, but the documentation link will be provided, so no worry. Ok, let’s start.\nCreating the django project and app Run this command in the terminal/console:\ndjango-admin startproject feedback This will create a directory structure like this:\nfeedback ├── feedback │ ├── __init__.py │ ├── settings.py │ ├── urls.py │ └── wsgi.py └── manage.py Now enter to the project directory by:\ncd feedback Well, now we will create an app named ‘form’:\npython manage.py startapp form This will create the directory structure like this:\nfeedback ├── feedback │ ├── __init__.py │ ├── settings.py │ ├── urls.py │ └── wsgi.py ├── form │ ├── admin.py │ ├── apps.py │ ├── __init__.py │ ├── migrations │ │ └── __init__.py │ ├── models.py │ ├── tests.py │ └── views.py └── manage.py If you know the basics of django, you know what’s going on. If you stuck here, please read the django official tutorial first.\nEnabling the app at settings.py Open the feedback/settings.py file and add ‘form’ in the INSTALLED_APPS list, like this:\n33 34 35 36 37 38 39 40 41  INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'form', ]   Additionally you can change the time zone from settings.py file. I am setting the time zone from ‘UTC’ to ‘Asia/Dhaka’:\n110  TIME_ZONE = 'Asia/Dhaka'   Creating the models Models are the python classes which contain the information about database. Read more about models here. For your information, in this tutorial, we are using SQLite as database backend. It is the default, so no further action is required.\nIn our feedback system, we will receive product based feedback. So there should be products in our database. For simplicity we assume that, our product has only one property, just its name.\nAnd in the feedback form, we want to collect the customer name, email, related product, detailed feedback, is he/she happy or not, and date.\nSo to design the models, open the form/models.py file and add this code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  from django.db import models class Product(models.Model): name = models.CharField(max_length=120) def __str__(self): return self.name class Feedback(models.Model): customer_name = models.CharField(max_length=120) email = models.EmailField() product = models.ForeignKey(Product) details = models.TextField() happy = models.BooleanField() date = models.DateField(auto_now_add=True) def __str__(self): return self.customer_name   Now, run this command for making the migrations (database changes):\npython manage.py makemigrations And apply the migrations by this command:\npython manage.py migrate To know the details about migrations, read this.\nEnabling and configuring the admin interface To use the default admin interface provided by django for our models, we need to create the super user first. Run this command to do that:\npython manage.py createsuperuser This will prompt for username, email and password. Provide this.\nNow to enable and to customize the admin interface of our model, open the form/admin.py file and put this code in it:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  from django.contrib import admin from .models import Product, Feedback class FeedbackAdmin(admin.ModelAdmin): list_display = ('product', 'customer_name', 'date', 'happy',) list_filter = ('product', 'date',) search_fields = ('product__name', 'details',) class Meta: model = Feedback admin.site.register(Feedback, FeedbackAdmin) admin.site.register(Product)   The details about admin site can be found here.\nNow run this command to start the development server:\npython manage.py runserver Now go to http://127.0.0.1:8000/admin/ from your browser, log in and add some products and feedback and check that everything works just fine.\nScreenshot: list of feedback at django admin site\nCreating the view First create a new file at form/forms.py and put this code in it:\n1 2 3 4 5 6 7 8 9  from django import forms from .models import Feedback class FeedbackForm(forms.ModelForm): class Meta: model = Feedback exclude = []   Learn more about forms and model forms.\nNow edit the form/views.py in this way:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  from django.shortcuts import render from .forms import FeedbackForm def feedback_form(request): if request.method == 'POST': form = FeedbackForm(request.POST) if form.is_valid(): form.save() return render(request, 'form/thanks.html') else: form = FeedbackForm() return render(request, 'form/feedback_form.html', {'form': form})   Creating the templates Create a folder named ‘templates’ inside the ‘form’ folder. And create another folder named ‘form’ inside the ‘templates’ folder. Now create three empty html file named ‘base.html’, ‘feedback_form.html’ and ‘thanks.html’ inside the form folder. The directory structure should look like this:\nform ├── templates │ └── form │ ├── base.html │ ├── feedback_form.html │ └── thanks.html Now, open the form/templates/form/base.html file and add this code to it:\n1 2 3 4 5 6 7 8 9  \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003e{% block title %}{% endblock %}\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e {% block body %}{% endblock %}\u003c/body\u003e \u003c/html\u003e   Open the form/templates/form/feedback_form.html file and add this code to it:\n1 2 3 4 5 6 7 8 9 10 11  {% extends 'form/base.html' %}{% block title %}Feedback Form{% endblock %}{% block body %}\u003cform action=\"{% url 'form:home' %}\" method=\"POST\"\u003e {% csrf_token %}{{ form.as_p }}\u003cinput type=\"submit\" /\u003e \u003c/form\u003e {% endblock %}  Finally, open the form/templates/form/thanks.html file and add this code to it:\n1 2 3 4 5 6 7 8  {% extends 'form/base.html' %}{% block title %}Thanks{% endblock %}{% block body %}\u003ch1\u003eThanks for your response.\u003c/h1\u003e \u003cp\u003e\u003ca href=\"{% url 'form:home' %}\"\u003eResponse again?\u003c/a\u003e\u003c/p\u003e {% endblock %}  You can learn more about django template language.\nURL configuration Create and open the file form/urls.py and put this code in it:\n1 2 3 4 5 6 7 8  from django.conf.urls import url from . import views app_name = 'form' urlpatterns = [ url(r'^$', views.feedback_form, name='home'), ]   Now, edit the feedback/urls.py if like this way:\n1 2 3 4 5 6 7  from django.conf.urls import include, url from django.contrib import admin urlpatterns = [ url(r'^', include('form.urls')), url(r'^admin/', admin.site.urls), ]   You can learn more about django URL dispatcher.\nConclusion All done! Now fire up the django development server by this command:\npython manage.py runserver Now go to **http://127.0.0.1:8000/ **from your browser. You should see like this:\nScreenshot: feedback form\nFill up the form and hit submit. Now, you should see a thanks page. Go to http://127.0.0.1:8000/admin/form/feedback/. You will see your entry here.\nThanks for reading this tutorial.\n","description":"","tags":["Django","Project","Python"],"title":"Creating a simple feedback system using Django","uri":"/creating-simple-feedback-system-using-django/"},{"categories":["Object Oriented Programming","Programming","Python"],"content":"অ্যাবস্ট্রাক্ট ক্লাস হল – যেভাবে সাবক্লাস গুলো ডিজাইন করা হবে তার একটা নকশা বা ব্লু-প্রিন্ট। আমরা যদি টিমে কাজ করে থাকি তাহলে এরকম প্রয়োজন হতে পারে যে, একজন ডেভেলপার শুরুতে ঠিক করে দিবেন ক্লাস গুলোতে কি কি মেথড/প্রোপার্টি থাকবে। অন্য ডেভেলপার সে অনুযায়ী ক্লাস ডিজাইন করবেন। অর্থাৎ একজন নকশা করবেন, আরেকজন ইমপ্লিমেন্ট করবেন। এরকম পরিস্থিতির জন্য আছে অ্যাবস্ট্রাক্ট বেস ক্লাস।\nআচ্ছা, এখন কল্পনা করি, আমি এবং আমার একজন বন্ধু মিলে একটা প্রোজেক্ট করছি। সেই প্রোজেক্টে একটা গাড়ির জন্য ক্লাস ডিজাইন করা লাগবে। সেই গাড়ির স্পিড – মেথড দিয়ে কমানো আর বাড়ানো যাবে। এই রিক্যুয়ারমেন্ট দেখেই আমি চিন্তা করে ফেললাম এমন একটা ক্লাস থাকবে, যার দুইটা মেথড থাকবে speed_up আর speed_down নামের। কিন্তু এ দুইটা মেথড কীভাবে ইমপ্লিমেন্ট করা হবে তা নিয়ে আমি আর চিন্তা করলাম না। এ কাজ আমার বন্ধুর উপর ছেড়ে দিলাম।\nতাহলে আমি আমার বন্ধুকে নিচের মত একটা অ্যাবস্ট্রাক্ট ক্লাস তৈরি করে দিলাম।\n1 2 3 4 5 6 7 8 9 10 11 12  import abc class BaseCar(metaclass=abc.ABCMeta): @abc.abstractmethod def speed_up(self): pass @abc.abstractmethod def speed_down(self): pass   এখানে লক্ষ্যনীয়, প্রথম লাইনে আমি abc নামের একটা মডিউল ইমপোর্ট করেছি। এ মডিউলটা আমাদের অ্যাবস্ট্রাক্ট বেস ক্লাস ফিচারটা দেয়। এরপর 4 নম্বর লাইনের metaclass=abc.ABCMeta দিয়ে পাইথনকে বলে দিচ্ছি, এটা অ্যাবস্ট্রাক্ট ক্লাস। মেটাক্লাস নিয়ে এখানে বিস্তারিত লিখবো না। পরে এ নিয়ে একটা ব্লগ লেখার ইচ্ছা আছে। এরপর 6 এবং 10 নম্বর লাইনে @abc.abstractmethod ডেকরেটর দিয়ে বুঝিয়ে দিচ্ছি মেথড দুইটি অ্যাবস্ট্রাক্ট মেথড।\nতাহলে আমি একরকম একটা কনট্রাক্ট লিখলাম। আর এ কনট্রাক্ট বাস্তবায়নের দায়িত্ব দিলাম আমার বন্ধুকে। কিন্তু আমার বন্ধু একটু হাবলু কিসিমের। সে প্রথমেই করলো কি, আমার দেয়া BaseCar অ্যাবস্ট্রাক্ট ক্লাসটাকে ইন্সটেন্সশিয়েট করার চেষ্টা করলো।\n15  toyota = BaseCar()   কিন্তু অ্যাবস্ট্রাক্ট ক্লাসকে ইন্সটেন্সশিয়েট করা যায় না, শুধু ইনহেরিট বা সাবক্লাস করা যায়।\nএ কথা জেনে ও এরপর এরকম কোড লিখলো:\n15 16 17 18 19 20 21 22 23 24 25 26 27  class Car(BaseCar): def __init__(self, initial_speed): self.speed = initial_speed def speed_plus(self): self.speed += 5 def speed_minus(self): self.speed -= 5 toyota = Car(50)   এবার পাইথন ওকে এরকম ইরর দিল:\nTraceback (most recent call last): File \"abstract.py\", line 27, in \u003cmodule\u003e toyota = Car(50) TypeError: Can't instantiate abstract class Car with abstract methods speed_down, speed_up আসলে কনট্রাক্টে(অ্যাবস্ট্রাক্ট ক্লাসে) আমি বলে দিয়েছিলাম যে speed_up আর speed_down নামের দুটি মেথড থাকবে। কিন্তু আমার বন্ধু মেথড দুটির নাম দিয়েছে speed_plus আর speed_minus । অর্থাৎ সে কনট্রাক্ট ভায়োলেট করেছে। এটা করলে তো চলবে না। এখন সে ঠিক ঠাক করে এরকম কোড লিখলো:\n15 16 17 18 19 20 21 22 23 24 25 26 27  class Car(BaseCar): def __init__(self, initial_speed): self.speed = initial_speed def speed_up(self): self.speed += 5 def speed_down(self): self.speed -= 5 toyota = Car(50)   এবার আর পাইথন বেঁকে বসেনি। অর্থাৎ সব ঠিক ঠাকই আছে।\nএর মাধ্যমে আমরা পাইথনে অ্যাবস্ট্রাক্ট বেস ক্লাস সম্পর্কে ব্যাসিক একটা ধারণা পেলাম। বিস্তারিত জানতে চাইলে সার্চ ইঞ্জিন মামা তো আছেই। abc মডিউল সম্পর্কে বিস্তারিত জানা যাবে এখান থেকে।\n","description":"","tags":["অবজেক্ট অরিয়েন্টেড","অ্যাবস্ট্রাক্ট ক্লাস","পাইথন"],"title":"পাইথনে অ্যাবস্ট্রাক্ট বেস ক্লাস","uri":"/python-abstract-base-class-in-bangla/"},{"categories":["Object Oriented Programming","Programming","Python"],"content":"বেশির ভাগ প্রোগ্রামারই মাল্টিপল ইনহ্যারিটেন্স ব্যাবহার করতে নিষেধ করেন। তারপরও বিশেষ কিছু ক্ষেত্রে আমাদের মাল্টিপল ইনহ্যারিটেন্স ব্যাবহার করতে হয়। তাহলে জেনে নেয়া যাক পাইথনে মাল্টিপল ইনহ্যারিটেন্স যে অর্ডার অনুসারে কাজ করে।\nনিচের ডায়াগ্রাম টি দেখি:\nএই ডায়াগ্রাম অনুযায়ী কোড লিখি তাহলে:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  class A(object): def test(self): print(\"Test from A\") class B(object): def test(self): print(\"Test from B\") class C(A, B): pass c_instance = C() c_instance.test()   এখন আমরা যদি কোডটি রান করি তাহলে আউটপুট কী আসবে?\nকোডটির আউটপুট আসবে:\nTest from A অর্থাৎ আমরা যখন c_instance এর উপর test() মেথডটি কল করলাম, পাইথন প্রথমে এ মেথড টিকে C ক্লাসে খুজেছে। না পেয়ে এরপর A ক্লাসে খুজেছে। এখানে পেয়ে গেছে। এখানেও না পেলে তখন B ক্লাসে খুঁজত।\nএই যে খোঁজাখুজি, পাইথন কোনটার পর কোনটায় খুঁজবে – এ ব্যাপারটিকে বলে মেথড রেজ্যুলেশন অর্ডার। আমরা যদি C ক্লাস এর মেথড রেজুলেশন অর্ডার দেখতে চাই, তাহলে যা করতে হবে:\n17  print(C.mro())   তাহলে এরকম আউটপুট পাবো:\n[\u003cclass '__main__.C'\u003e, \u003cclass '__main__.A'\u003e, \u003cclass '__main__.B'\u003e, \u003cclass 'object'\u003e] আচ্ছা এখন তাহলে এ ডায়াগ্রামটি দেখি:\nএখন এই ডায়াগ্রাম অনুযায়ী কোড লিখি:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  class A(object): def test(self): print(\"Test from A\") class B(A): pass class C(object): def test(self): print(\"Test from C\") class D(B, C): pass d_instance = D() d_instance.test()   তাহলে এ কোডের আউটপুট কি হবে?\nকোডের আউটপুট হবে এরকম:\nTest from A কি! উল্টাপাল্টা মনে হচ্ছে?\nআসলে পাইথনে মেথড রেজ্যুলেশন অর্ডার ডেপথ-ফার্স্ট সার্চিং উপায়ে কাজ করে। ডেপথ-ফার্স্ট অনুযায়ী তাহলে অর্ডার হবে এমন: D -\u003e B -\u003e A -\u003e C। তাই আমাদের আউটপুট এমন এসেছে।\nআরেকটু নিশ্চিত হই:\n21  print(D.mro())   এটার আউটপুট আসবে এরকম:\n[\u003cclass '__main__.D'\u003e, \u003cclass '__main__.B'\u003e, \u003cclass '__main__.A'\u003e, \u003cclass '__main__.C'\u003e, \u003cclass 'object'\u003e] আচ্ছা, তাহলে সব ঠিক ঠাকই আছে। কিন্তু মাল্টিপল ইনহ্যারিটেন্স যদি নিচের ডায়াগ্রামের মত হয় তাহলে!\nএই ডায়াগ্রাম অনুযায়ী কোড:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  class A(object): def test(self): print(\"Test from A\") class B(A): pass class C(A): def test(self): print(\"Test from C\") class D(B, C): pass d_instance = D() d_instance.test()   এই কোডের আউটপুট কী হব?\nআউটপুট জানার আগে D ক্লাসের মেথড রেজ্যুলেশন অর্ডার বের করার চেষ্টা করি। ডেপথ-ফার্স্ট অনুযায়ী মেথড রেজ্যুলেশন অর্ডার এরকম হবার কথা: D -\u003e B -\u003e A -\u003e C -\u003e A।\nতাহলে আউটপুট আসার কথা:\nTest from A এখন কোডটি রান করে দেখি কী আউটপুট আসে:\nTest from C আহা! এরকম আউটপুট আসল কী করে! মেথড রেজ্যুলেশন অর্ডার চেক করে দেখি তো:\n21  print(D.mro())   আউটপুট:\n[\u003cclass '__main__.D'\u003e, \u003cclass '__main__.B'\u003e, \u003cclass '__main__.C'\u003e, \u003cclass '__main__.A'\u003e, \u003cclass 'object'\u003e] অর্থাৎ D -\u003e B -\u003e C -\u003e A। তাহলে এটা ডেপথ-ফার্স্ট হলো কী করে!\nপাইথন 2.3 থেকে নতুন একটি রুল যুক্ত হয়েছে। মেথড রেজ্যুলেশন অর্ডারের ডেপথ-ফার্স্টে যদি একই উপাদান একাধিক বার আসে, তাহলে একেবারে শেষটি রেখে বাকি গুলো মুছে দেয়া হয়। এখানে A দুইবার এসেছিল। তাই শুধু শেষেটি রাখা হয়েছে।\nআশা করি ব্যাপারটি এখন পরিষ্কার হয়েছে। পোস্টটি ভাল লাগলে কমেন্ট করুন আর বন্ধুদের সাথে শেয়ার করুন। আর যদি কোন ভুল ত্রুটি খুঁজে পান, তাহলেও কমেন্টের মধ্যমে জানান। দ্রুত আপডেট করা হবে ইনশা-আল্লাহ।\n","description":"","tags":["অবজেক্ট অরিয়েন্টেড","ইনহ্যারিটেন্স","পাইথন"],"title":"পাইথনে মাল্টিপল ইনহ্যারিটেন্স যেভাবে কাজ করে","uri":"/multiple-inheritance-in-python-in-bangla/"},{"categories":["C/C++","Programming"],"content":"বিভিন্ন কারণে আমাদের C প্রোগ্রাম থেকে ইমেইল প্রেরণের প্রয়োজন হতে পারে। আজ আমরা দেখবো কীভাবে libcurl ব্যাবহার করে জিমেইল SMTP সার্ভারের মাধ্যমে ইমেইল পাঠানো যায়।\nআমি এখানে libcurl কিংবা SMTP নিয়ে কোন আলোচনা করবো না। এগুলো সম্পর্কে না জেনে থাকলে সার্চ ইঞ্জিন ব্যাবহার করে জেনে নিন। আর আপনার কম্পিউটারে libcurl ইন্সটল করা না থাকলে, তা ইন্সটল করে আপনার IDE (Code::Blocks হয়ত!) তে লিংক করে নিন। আর এটা করার জন্যও সার্চ ইঞ্জিনের সরণাপন্ন হোন 🙂 ।\nএখন আসল কাজে নামা যাক। প্রথমে নিচের কোডটা দেখুন। এটা এখান থেকে নেয়া।\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163  /*************************************************************************** * _ _ ____ _ * Project ___| | | | _ \\| | * / __| | | | |_) | | * | (__| |_| | _ \u003c| |___ * \\___|\\___/|_| \\_\\_____| * * Copyright (C) 1998 - 2014, Daniel Stenberg, \u003cdaniel@haxx.se\u003e, et al. * * This software is licensed as described in the file COPYING, which * you should have received as part of this distribution. The terms * are also available at http://curl.haxx.se/docs/copyright.html. * * You may opt to use, copy, modify, merge, publish, distribute and/or sell * copies of the Software, and permit persons to whom the Software is * furnished to do so, under the terms of the COPYING file. * * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTY OF ANY * KIND, either express or implied. * ***************************************************************************/ #include \u003cstdio.h\u003e#include \u003cstring.h\u003e#include \u003ccurl/curl.h\u003e /* This is a simple example showing how to send mail using libcurl's SMTP * capabilities. It builds on the smtp-mail.c example to add authentication * and, more importantly, transport security to protect the authentication * details from being snooped. * * Note that this example requires libcurl 7.20.0 or above. */ #define FROM \"\u003csender@example.org\u003e\" #define TO \"\u003caddressee@example.net\u003e\" #define CC \"\u003cinfo@example.org\u003e\"  static const char *payload_text[] = { \"Date: Mon, 29 Nov 2010 21:54:29 +1100\\r\\n\", \"To: \" TO \"\\r\\n\", \"From: \" FROM \"(Example User)\\r\\n\", \"Cc: \" CC \"(Another example User)\\r\\n\", \"Message-ID: \u003cdcd7cb36-11db-487a-9f3a-e652a9458efd@rfcpedant.example.org\u003e\\r\\n\", \"Subject: SMTP TLS example message\\r\\n\", \"\\r\\n\", /* empty line to divide headers from body, see RFC5322 */ \"The body of the message starts here.\\r\\n\", \"\\r\\n\", \"It could be a lot of lines, could be MIME encoded, whatever.\\r\\n\", \"Check RFC5322.\\r\\n\", NULL }; struct upload_status { int lines_read; }; static size_t payload_source(void *ptr, size_t size, size_t nmemb, void *userp) { struct upload_status *upload_ctx = (struct upload_status *)userp; const char *data; if((size == 0) || (nmemb == 0) || ((size*nmemb) \u003c 1)) { return 0; } data = payload_text[upload_ctx-\u003elines_read]; if(data) { size_t len = strlen(data); memcpy(ptr, data, len); upload_ctx-\u003elines_read++; return len; } return 0; } int main(void) { CURL *curl; CURLcode res = CURLE_OK; struct curl_slist *recipients = NULL; struct upload_status upload_ctx; upload_ctx.lines_read = 0; curl = curl_easy_init(); if(curl) { /* Set username and password */ curl_easy_setopt(curl, CURLOPT_USERNAME, \"user\"); curl_easy_setopt(curl, CURLOPT_PASSWORD, \"secret\"); /* This is the URL for your mailserver. Note the use of port 587 here, * instead of the normal SMTP port (25). Port 587 is commonly used for * secure mail submission (see RFC4403), but you should use whatever * matches your server configuration. */ curl_easy_setopt(curl, CURLOPT_URL, \"smtp://mainserver.example.net:587\"); /* In this example, we'll start with a plain text connection, and upgrade * to Transport Layer Security (TLS) using the STARTTLS command. Be careful * of using CURLUSESSL_TRY here, because if TLS upgrade fails, the transfer * will continue anyway - see the security discussion in the libcurl * tutorial for more details. */ curl_easy_setopt(curl, CURLOPT_USE_SSL, (long)CURLUSESSL_ALL); /* If your server doesn't have a valid certificate, then you can disable * part of the Transport Layer Security protection by setting the * CURLOPT_SSL_VERIFYPEER and CURLOPT_SSL_VERIFYHOST options to 0 (false). * curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0L); * curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 0L); * That is, in general, a bad idea. It is still better than sending your * authentication details in plain text though. * Instead, you should get the issuer certificate (or the host certificate * if the certificate is self-signed) and add it to the set of certificates * that are known to libcurl using CURLOPT_CAINFO and/or CURLOPT_CAPATH. See * docs/SSLCERTS for more information. */ curl_easy_setopt(curl, CURLOPT_CAINFO, \"/path/to/certificate.pem\"); /* Note that this option isn't strictly required, omitting it will result in * libcurl sending the MAIL FROM command with empty sender data. All * autoresponses should have an empty reverse-path, and should be directed * to the address in the reverse-path which triggered them. Otherwise, they * could cause an endless loop. See RFC 5321 Section 4.5.5 for more details. */ curl_easy_setopt(curl, CURLOPT_MAIL_FROM, FROM); /* Add two recipients, in this particular case they correspond to the * To: and Cc: addressees in the header, but they could be any kind of * recipient. */ recipients = curl_slist_append(recipients, TO); recipients = curl_slist_append(recipients, CC); curl_easy_setopt(curl, CURLOPT_MAIL_RCPT, recipients); /* We're using a callback function to specify the payload (the headers and * body of the message). You could just use the CURLOPT_READDATA option to * specify a FILE pointer to read from. */ curl_easy_setopt(curl, CURLOPT_READFUNCTION, payload_source); curl_easy_setopt(curl, CURLOPT_READDATA, \u0026upload_ctx); curl_easy_setopt(curl, CURLOPT_UPLOAD, 1L); /* Since the traffic will be encrypted, it is very useful to turn on debug * information within libcurl to see what is happening during the transfer. */ curl_easy_setopt(curl, CURLOPT_VERBOSE, 1L); /* Send the message */ res = curl_easy_perform(curl); /* Check for errors */ if(res != CURLE_OK) fprintf(stderr, \"curl_easy_perform() failed: %s\\n\", curl_easy_strerror(res)); /* Free the list of recipients */ curl_slist_free_all(recipients); /* Always cleanup */ curl_easy_cleanup(curl); } return (int)res; }   কিহ! ঘাবরে গেলেন! নাহ, ঘাবরানোর কিছু নেই। পুরো কোডটার অর্থ আমাদের আপাতত না বুঝলেও চলবে।\nএখন কোডের এ অংশটির দিকে খেয়াল করুন:\n34 35 36  #define FROM \"\u003csender@example.org\u003e\" #define TO \"\u003caddressee@example.net\u003e\" #define CC \"\u003cinfo@example.org\u003e\"   মনে করি, আমরা যে ইমেইল এড্রেস থেকে ইমেইলটি পাঠাবো, সেটি হল blabla@gmail.com, যাকে পাঠাবো তার ইমেইল হল, hellotest@gmail.com এবং CC হল testcc@gmail.com. তাহলে এ অংশ আমাদের এভাবে পরিবর্তন করতে হবে।\n34 35 36  #define FROM \"\u003cblabla@gmail.com\u003e\" #define TO \"\u003chellotest@gmail.com\u003e\" #define CC \"\u003ctestcc@gmail.com\u003e\"   এখন নিচের অংশটুকু লক্ষ্য করুন:\n38 39 40 41 42 43 44 45 46 47 48 49 50 51  static const char *payload_text[] = { \"Date: Mon, 29 Nov 2010 21:54:29 +1100\\r\\n\", \"To: \" TO \"\\r\\n\", \"From: \" FROM \"(Example User)\\r\\n\", \"Cc: \" CC \"(Another example User)\\r\\n\", \"Message-ID: \u003cdcd7cb36-11db-487a-9f3a-e652a9458efd@rfcpedant.example.org\u003e\\r\\n\", \"Subject: SMTP TLS example message\\r\\n\", \"\\r\\n\", /* empty line to divide headers from body, see RFC5322 */ \"The body of the message starts here.\\r\\n\", \"\\r\\n\", \"It could be a lot of lines, could be MIME encoded, whatever.\\r\\n\", \"Check RFC5322.\\r\\n\", NULL };   এ অংশটুকু আশা করি দেখেই বুঝে ফেলেছেন। এখন নিজের ইচ্ছা মত পরিবর্তন করুন। আমি এরকম করছি:\n38 39 40 41 42 43 44 45 46 47 48 49 50 51  static const char *payload_text[] = { \"Date: Fri, 16 Oct 2015 22:50:29 +0600\\r\\n\", \"To: \" TO \"\\r\\n\", \"From: \" FROM \"Bla Bla\\r\\n\", \"Cc: \" CC \"Tester\\r\\n\", \"Message-ID: \u003cdcd7cb36-11db-487a-9f3a-e652a9458efd@rfcpedant.example.org\u003e\\r\\n\", \"Subject: Gmail SMTP test email\\r\\n\", \"\\r\\n\", /* empty line to divide headers from body, see RFC5322 */ \"This is my awesome message.\\r\\n\", \"\\r\\n\", \"I can add more text here.\\r\\n\", \"etc etc.\\r\\n\", NULL };   এখন গুরুত্বপূর্ণ অংশ। নিচের কোড লক্ষ্য করুন:\n91 92  curl_easy_setopt(curl, CURLOPT_USERNAME, \"user\"); curl_easy_setopt(curl, CURLOPT_PASSWORD, \"secret\");   উপরে যেখানে user এবং secret লেখা দেখছেন, সেখানে যথাক্রমে আপনি যে জিমেইল একাউন্ট ব্যাবহার করে ইমেইলটি পাঠাতে চাচ্ছেন সেটি এবং তার পাসওয়ার্ড দিতে হবে। আমি blabla@gmail.com থেকে যদি ইমেইল টি পাঠাতে চাই, এবং তার পাসওয়ার্ড যদি হয় blablapass , তাহলে কোডটুকু দেখতে হবে এরকম:\n91 92  curl_easy_setopt(curl, CURLOPT_USERNAME, \"blabla@gmail.com\"); curl_easy_setopt(curl, CURLOPT_PASSWORD, \"blablapass\");   এখন দখুন:\n98  curl_easy_setopt(curl, CURLOPT_URL, \"smtp://mainserver.example.net:587\");   এটি পরিবর্তন করে করতে হবে এভাবে:\n98  curl_easy_setopt(curl, CURLOPT_URL, \"smtp://smtp.gmail.com:587\");   এখন শেষ কাজ:\n118  curl_easy_setopt(curl, CURLOPT_CAINFO, \"/path/to/certificate.pem\");   এই লাইনটিকে কমেন্ট আউট করুন। এভাবে:\n118  // curl_easy_setopt(curl, CURLOPT_CAINFO, \"/path/to/certificate.pem\");   তাহলে সম্পূর্ন কোডটি দেখতে হবে এরকম:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163  /*************************************************************************** * _ _ ____ _ * Project ___| | | | _ \\| | * / __| | | | |_) | | * | (__| |_| | _ \u003c| |___ * \\___|\\___/|_| \\_\\_____| * * Copyright (C) 1998 - 2014, Daniel Stenberg, \u003cdaniel@haxx.se\u003e, et al. * * This software is licensed as described in the file COPYING, which * you should have received as part of this distribution. The terms * are also available at http://curl.haxx.se/docs/copyright.html. * * You may opt to use, copy, modify, merge, publish, distribute and/or sell * copies of the Software, and permit persons to whom the Software is * furnished to do so, under the terms of the COPYING file. * * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTY OF ANY * KIND, either express or implied. * ***************************************************************************/ #include \u003cstdio.h\u003e#include \u003cstring.h\u003e#include \u003ccurl/curl.h\u003e /* This is a simple example showing how to send mail using libcurl's SMTP * capabilities. It builds on the smtp-mail.c example to add authentication * and, more importantly, transport security to protect the authentication * details from being snooped. * * Note that this example requires libcurl 7.20.0 or above. */ #define FROM \"\u003cblabla@gmail.com\u003e\" #define TO \"\u003chellotest@gmail.com\u003e\" #define CC \"\u003ctestcc@gmail.com\u003e\"  static const char *payload_text[] = { \"Date: Fri, 16 Oct 2015 22:50:29 +0600\\r\\n\", \"To: \" TO \"\\r\\n\", \"From: \" FROM \"Bla Bla\\r\\n\", \"Cc: \" CC \"Tester\\r\\n\", \"Message-ID: \u003cdcd7cb36-11db-487a-9f3a-e652a9458efd@rfcpedant.example.org\u003e\\r\\n\", \"Subject: Gmail SMTP test email\\r\\n\", \"\\r\\n\", /* empty line to divide headers from body, see RFC5322 */ \"This is my awesome message.\\r\\n\", \"\\r\\n\", \"I can add more text here.\\r\\n\", \"etc etc.\\r\\n\", NULL }; struct upload_status { int lines_read; }; static size_t payload_source(void *ptr, size_t size, size_t nmemb, void *userp) { struct upload_status *upload_ctx = (struct upload_status *)userp; const char *data; if((size == 0) || (nmemb == 0) || ((size*nmemb) \u003c 1)) { return 0; } data = payload_text[upload_ctx-\u003elines_read]; if(data) { size_t len = strlen(data); memcpy(ptr, data, len); upload_ctx-\u003elines_read++; return len; } return 0; } int main(void) { CURL *curl; CURLcode res = CURLE_OK; struct curl_slist *recipients = NULL; struct upload_status upload_ctx; upload_ctx.lines_read = 0; curl = curl_easy_init(); if(curl) { /* Set username and password */ curl_easy_setopt(curl, CURLOPT_USERNAME, \"blabla@gmail.com\"); curl_easy_setopt(curl, CURLOPT_PASSWORD, \"blablapass\"); /* This is the URL for your mailserver. Note the use of port 587 here, * instead of the normal SMTP port (25). Port 587 is commonly used for * secure mail submission (see RFC4403), but you should use whatever * matches your server configuration. */ curl_easy_setopt(curl, CURLOPT_URL, \"smtp://smtp.gmail.com:587\"); /* In this example, we'll start with a plain text connection, and upgrade * to Transport Layer Security (TLS) using the STARTTLS command. Be careful * of using CURLUSESSL_TRY here, because if TLS upgrade fails, the transfer * will continue anyway - see the security discussion in the libcurl * tutorial for more details. */ curl_easy_setopt(curl, CURLOPT_USE_SSL, (long)CURLUSESSL_ALL); /* If your server doesn't have a valid certificate, then you can disable * part of the Transport Layer Security protection by setting the * CURLOPT_SSL_VERIFYPEER and CURLOPT_SSL_VERIFYHOST options to 0 (false). * curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0L); * curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 0L); * That is, in general, a bad idea. It is still better than sending your * authentication details in plain text though. * Instead, you should get the issuer certificate (or the host certificate * if the certificate is self-signed) and add it to the set of certificates * that are known to libcurl using CURLOPT_CAINFO and/or CURLOPT_CAPATH. See * docs/SSLCERTS for more information. */ //curl_easy_setopt(curl, CURLOPT_CAINFO, \"/path/to/certificate.pem\");  /* Note that this option isn't strictly required, omitting it will result in * libcurl sending the MAIL FROM command with empty sender data. All * autoresponses should have an empty reverse-path, and should be directed * to the address in the reverse-path which triggered them. Otherwise, they * could cause an endless loop. See RFC 5321 Section 4.5.5 for more details. */ curl_easy_setopt(curl, CURLOPT_MAIL_FROM, FROM); /* Add two recipients, in this particular case they correspond to the * To: and Cc: addressees in the header, but they could be any kind of * recipient. */ recipients = curl_slist_append(recipients, TO); recipients = curl_slist_append(recipients, CC); curl_easy_setopt(curl, CURLOPT_MAIL_RCPT, recipients); /* We're using a callback function to specify the payload (the headers and * body of the message). You could just use the CURLOPT_READDATA option to * specify a FILE pointer to read from. */ curl_easy_setopt(curl, CURLOPT_READFUNCTION, payload_source); curl_easy_setopt(curl, CURLOPT_READDATA, \u0026upload_ctx); curl_easy_setopt(curl, CURLOPT_UPLOAD, 1L); /* Since the traffic will be encrypted, it is very useful to turn on debug * information within libcurl to see what is happening during the transfer. */ curl_easy_setopt(curl, CURLOPT_VERBOSE, 1L); /* Send the message */ res = curl_easy_perform(curl); /* Check for errors */ if(res != CURLE_OK) fprintf(stderr, \"curl_easy_perform() failed: %s\\n\", curl_easy_strerror(res)); /* Free the list of recipients */ curl_slist_free_all(recipients); /* Always cleanup */ curl_easy_cleanup(curl); } return (int)res; }   এখন কোডটা কম্পাইল করে রান করুন। আপনি যদি সব কিছু ঠিক ঠাক মত করে থাকেন, তাহলে কনসোলে কিছু ইনফরমেশন দেখতে পাবেন এবং আপনার ইমেইলটি যথাযথ ভাবে পৌছে যাবে।\nধৈর্য ধরে লেখাটি পড়ার জন্য ধন্যবাদ। আপনি কাজটি করতে সফল হলে কিংবা কোথাও বুঝতে সমস্যা হলে নির্দ্বিধায় কমেন্ট করুন। আর আমি কোথাও ভুল লিখলে সেটাও কমেন্টের মাধ্যমে জানিয়ে দিন। আর ইচ্ছে হলে সাবস্ক্রাইব করতে পারেন এ ব্লগে।\nহ্যাপি কোডিং 🙂\n","description":"","tags":["C","libcurl","SMTP","জিমেইল"],"title":"C প্রোগ্রাম এর সাহায্যে ইমেইল প্রেরণ","uri":"/send-email-using-c-program/"},{"categories":["Linux","Ubuntu","Wordpress"],"content":"Maybe the title of this blog post isn’t perfect. While I am writing this post, no better title is coming to my mind.\nBy the way, let me explain the topic. Suppose you have installed WordPress in the XAMPP stack in Ubuntu (or any other ubuntu based distro). Now you want to install some plugins and themes from the WordPress dashboard. You have clicked on the “Install Now” button and suddenly this ugly(!) message comes in front of you, asking for your FTP credentials.\nBut it should not happen. So you start searching in the internet how to fix this problem. In the maximum solution, you have been told to input your FTP credentials or add them to the wp-config.php file. But it can be solved in a different way.\nActually if the user of WordPress installation directory is different from the user of apache, this problem happens. So we need to fix this.\nFirstly, we need to check the user of apache. To do this, run the following command in terminal:\nps -ef | grep httpd | grep -v `whoami` | grep -v root | head -n1 | awk '{print $1}' In my case, the user of apache is “daemon”.\nSo we need to change the user and group of WordPress installation directory to “daemon”. To do this, run the following command in terminal:\nsudo chown -R daemon:daemon /opt/lampp/htdocs/wordpress/ Replace daemon:daemon with your apache user:group (you have got this by running the firstly mentioned command). Replace /opt/lampp/htdocs/wordpress/ with your WordPress directory location.\nBoom!!! Done!!!\nSo by now you can install themes and plugins and can update them without your FTP credentials. Congratulation!\nIf you find this post helpful, please do share and subscribe to this blog by your email. And obviously feel free to share your thoughts in the comment section. Have a nice day 🙂\n","description":"","tags":["FTP","Ubuntu","WordPress"],"title":"[Solution] WordPress asks for FTP credentials in Ubuntu","uri":"/solution-wordpress-asks-for-ftp-credentials-in-ubuntu/"},{"categories":["Mozilla"],"content":"৯ থেকে ১২ ফেব্রুয়ারি, বঙ্গবন্ধু আন্তর্জাতিক সম্মেলন কেন্দ্রে এবারের চার দিন ব্যাপী ডিজিটাল ওয়ার্ল্ড ‘১৫ মেলা অনুষ্ঠিত হয়েছে। সেখানে ব্যাসিস সফট এক্সপো'র ২৯-৩০ নাম্বার বুথ ছিল মজিলা ফাউন্ডেশনের। এই বুথ-ইভেন্টের জন্য হ্যাশট্যাগ ছিল #mozbasis15.\nমজিলিয়ান হিসেবে কিংবা এমনিতেও এরকম ইভেন্টে জীবনের প্রথম বুথ এটেন্ডি হিসেবে অংশগ্রহণ করেছিলাম। আমি মূলত উপস্থিত ছিলাম ১০ ও ১১ তারিখ। সেই সামান্য সময়ের অভিজ্ঞতা নিয়ে এলোমেলো এই ব্লগ পোস্ট।\nসম্পূর্ণ সফট এক্সপোর মধ্যে আমার দেখা সবচেয়ে ব্যাস্ত বুথ ছিল আমাদের এই মজিলা ফাউন্ডেশনের বুথ। মানুষের আগ্রহ ছিল তুলনা মূলক অনেক বেশি। মানুষের জানার আগ্রহ মেটাতে মজিলিয়ানরা সর্বদা তৎপর ছিলেন। বুথের পাশাপাশি, ভীড় কমাতে আমরা অনেকে বুথের বাইরে ছিলাম সাপোর্ট দেয়ার জন্য।\nআমি সেখানে মূলত ছিলাম FSA সম্পর্কে বলতে। কিন্তু শুধু FSA নয়, এর চেয়ে বরং বেশি আন্যান্য ব্যাপারে বলতে হয়েছে।\nআমি মূলত যে ব্যাপারে দর্শনার্থীদের বলতে চেষ্টা করেছি:\n মজিলা কি? আমরা এখানে কেন? আমাদের কি লাভ? ফায়ারফক্সের বিভিন্ন সমস্যা সমাধান। মজিলায় কিভাবে যুক্ত হব? ওয়েব মেকার। ফায়রফক্স হ্যালো, ডু-নট-ট্র্যাক, বাংলা বানান শুদ্ধকরণ। ফায়ারফক্স স্টুডেন্ট অ্যাম্বাসেডর প্রোগ্রাম। মজিলা লোকেশন সার্ভিস…….ইত্যাদি।  আমার প্রাপ্তি: আসলে কোন প্রাপ্তির কথা চিন্তা করে আমি এই ইভেন্টে অংশগ্রহণ করি নি। তারপরও ইভেন্ট শেষে প্রাপ্তির তালিকাও কম লম্বা নয়।\nএই ইভেন্ট অংশগ্রহণ করে পেয়েছি আসাধারণ কিছু মজিলিয়ান বন্ধু। (আসলে ছোট-বড় ভাই-বোন)। সময় টুকু ব্যাস্ততার মধ্যেও বেশ আনন্দে কেটেছে। সবাই অনেক সাহায্যকারী এবং বন্ধু সুলভ। আমার একবারের জন্যও মনে হয় নি, আমি তাদের সাথে এই প্রথম আছি। সব সময় মনে হয়েছে এরা আপন, অনেক আগে থেকেই সম্পর্ক আছে। এই ইভেন্ট শেষে তাদের খুব মিস করছি।\nপাবলিক-স্পিকিং বলে একটা ব্যাপার আছে। এটায় আমার মনে হয় আমি খুব খারাপ না, আসলে কখনো এভাবে পরীক্ষা করেই তো দেখা হয় নি – এ বিষয়ে আমি কেমন! এই ইভেন্টের বদৌলতে তা হয়ে গেল। অনেক কিছু শিখেছি। কীভাবে মানুষদের সাথে কথা বলতে হয়, কীভাবে দৃষ্টি আকর্ষণ করে কোন পণ্য বা সেবা সম্পর্কে মানুষকে জানাতে হয়, কীভাবে প্রশ্নের উত্তর যথাযথ ভাবে দেয়া যায়, কীভাবে মাথা ঠান্ডা রেখে একটু অপ্রাশঙ্গিক প্রশ্ন কৌশলে উত্তর দেয়া যায় ইত্যাদি ইত্যাদি।\nবেশ কয়েকজন ভিজিটিং কার্ড দিয়ে যাচ্ছিলেন। ফেলে দিয়েছিলাম বেশিভাগই। আসলে কেন দিয়ে যাচ্ছিলেন সেটাই বোধগম্য হচ্ছিল না। পরে বুঝলাম, বোধহয় মজিলার মিশন কিংবা আমার উত্তর শুনে তাদের ভাল লেগেছিল। তাই তারা সংযুক্ত থাকতে চেয়েছিলেন। এটাকে প্রাপ্তির খাতায়ই ফেলা যায়!\nআমার ভার্সিটির কিছু সিনিয়র ভাইদের সাথে দেখা হয়ে গিয়েছিল, তখন আমি তাদেরকে আমাদের ফায়ারফক্স ক্লাব সম্পর্কে বলেছি, যুক্ত হতে উৎসাহ দিয়েছি। তারা শিঘ্রই যুক্ত হবেন বলে আশা করি। আর এই ইভেন্ট সম্পর্কে জেনে আমার অনেক বন্ধুই ফায়ারফক্স ক্লাবে যোগ দিতে আগ্রহী হয়েছে। তারা কিভাবে মজিলায় অবদান রাখবে সে সম্পর্কে জানতে চাচ্ছে। এ এক বিরাট প্রাপ্তি।\nকিছু ছবি: ","description":"","tags":["mozbasis15","মজিলা"],"title":"একজন নবাগত মজিলিয়ানের দৃষ্টিতে #mozbasis15","uri":"/mozbasis15/"},{"categories":["Mozilla"],"content":"আসসালামু-অলাইকুম। পোস্টের শিরোনাম দেখে এতক্ষণে নিশ্চয়ই অনুমান করে নিয়েছেন লেখাটি ফায়ারফক্স স্টুডেন্ট অ্যাম্বাসেডর প্রোগ্রাম সম্পর্কে। হ্যাঁ, এই পোস্টে আমরা ফায়ারফক্স স্টুডেন্ট অ্যাম্বাসেডর প্রোগ্রাম সহ আরো কিছু বিষয়ে সংক্ষেপে জানব। যে সব বিষয় সম্পর্কে সংক্ষেপে আলোচনা থাকছে এই পোস্টে:\n ফায়ারফক্স স্টুডেন্ট অ্যাম্বাসেডর প্রোগ্রাম কী? মজিলা কী এবং এর উদ্দেশ্য কী? ফায়ারফক্স স্টুডেন্ট অ্যাম্বাসেডররা কী করেন? আপনি এই প্রোগ্রামে কেন যুক্ত হবেন? কীভাবে যুক্ত হবেন?  আচ্ছা, তাহলে শুরু করা যাক!\nফায়ারফক্স স্টুডেন্ট অ্যাম্বাসেডর প্রোগ্রাম: ফায়ারফক্স স্টুডেন্ট অ্যাম্বাসেডর(সংক্ষেপে FSA) হলেন সেই সকল শিক্ষার্থীরা, যারা মজিলা, ওপেন ওয়েব, ফায়ারফক্স, ফায়ারফক্স ওস সহ মজিলার বিভিন্ন সেবার সুবিধা সমূহ নিয়ে উৎসাহী। এ সকল উৎসাহী শিক্ষার্থীদের নিয়েই মজিলার এই ফায়ারফক্স স্টুডেন্ট অ্যাম্বাসেডর প্রোগ্রাম।\nমজিলা এবং এর উদ্দেশ্য: মজিলা হল একটি অলাভজনক প্রতিষ্ঠান, যেটা ওয়েব কে মুক্ত রাখতে ও আমাদের মত ব্যাবহারকারীদের স্বার্থ সংরক্ষণে নানা উপায়ে কাজ করে যাচ্ছে। এটি কোন ব্যাবসায়ীক প্রতিষ্ঠান নয়, একটি সংগঠন। আমার এবং আপনার মত সাধারণ মানুষের সংগঠন। যা আমাদের মত সাধারণ মানুষদের অধিকারের জন্য, বড় বড় ব্যাবসায়ীক প্রতিষ্ঠানের বিরুদ্ধে লড়ে যাচ্ছে।\nমজিলা ও ফায়রফক্স সম্পর্ক আরেকটু গভীর ভাবে জানতে এই ভিডিও দুটি দেখতে পারেন:\n(১)   (২)   মজিলার মিশন সম্পর্কে জানতে চলে যান এই লিংকে।\nমজিলা ওপেন বলতে যা বোঝায়\nস্টুডেন্ট অ্যাম্বাসেডররা যে সকল কাজে সম্পৃক্ত থাকেন:  ফায়ারফক্স ওয়েব ব্রাউজারকে প্রোমোট কারা। ফায়ারফক্স ওএস কে প্রোমোট করা। মজিলার মিশন সম্পর্কে অন্যদের অবগত করা। ওয়েব সম্পর্কে শিক্ষার প্রসার ঘটানো। কিভাবে কোডিং করতে হয়, অ্যাপস বানাতে হয়, অনলাইনে কিভাবে অসাধারণ জিনিস তৈরি করতে হয় তা অন্যদের শেখানো। ওপেন ওয়েব এবং ইনোভেশন কে প্রোমোট করা।  মজিলা বলে থাকে:\n We know we’re up against billion-dollar giants, but our Ambassadors are here tackling new challenges daily to fight for your privacy and for an open Web.\n আপনি যে জন্য স্টুডেন্ট অ্যাম্বাসেডর হবেন: আপনি আপনার অবসর সময়ের একটা অংশ এমন এক সংগঠন কে দিবেন, যারা প্রত্যক্ষ্য ভাবে আপনার জন্য কাজ করে যাচ্ছে।\nপ্রকৃতপক্ষে আপনি আপনার এবং সমগ্র ইন্টারনেট কমিউনিটির জন্য কাজ করবেন, যা এক দিক থেকে সামাজিক দায়িত্বের অন্তর্ভুক্ত।\nতাছাড়া আপনি আরো অনেক কিছু উপভোগ করার সুযোগ পাবেন। যেমন:\n আপনার ক্যাম্পাসে নেতৃত্বের গুণাবলী অর্জন। মজিলা কমিউনিটির সাথে বিভিন্ন বড় ইভেন্ট আয়োজনের সুযোগ। বিভিন্ন ধরণের কন্টেন্ট তৈরির সুযোগ যা আপনি ভালবাসেন। যেমন: অ্যাপস, ওয়েব পেজ, ভিডিও, গ্রাফিক্স ইত্যাদি। অসাধারণ কিছু উপহার পেতে পারেন। যাকে সাধারণ ভাবে সোয়াগ বলা হয়। প্রযুক্তি, ব্যাবসা এবং বিপণনে অভিজ্ঞতা অর্জন। পৃথিবীর বিভিন্ন প্রান্তের অ্যাম্বাসাডরদের সাথে যোগাযোগের সুযোগ। আপনি এখানে একা নন 🙂 মজিলা ইন্টার্নশিপের জন্য বিবেচিত হওয়ার সুযোগ। নতুন কিছু করার মাধ্যমে পৃথিবী বদলে দেবার সুযোগ!  ফায়ারফক্স স্টুডেন্ট অ্যাম্বাসেডর হতে গেলে আপনাকে:  কমপক্ষে ১৮ বছর বয়স্ক হতে হবে। বর্তমানে শিক্ষার্থী, শিক্ষক কিংবা প্রশাসক হিসেবে কোন কলেজ বা বিশ্ববিদ্যালয়ের সাথে যুক্ত থাকতে হবে।  সাধারণ দুটি প্রশ্ন:   এই প্রোগ্রামে কি নির্দিষ্ট কোন সময়সীমা আছে, যা আমাকে দিতেই হবে?\n– না। কোন সময়সীমা নেই। আপনার যতটুকু খুশি ঠিক ততটুকু সময়ই দিতে পারবেন।\n  এখান থেকে কোন টাকা পাবার সম্ভাবনা আছে কি?\n– না, নেই। এই প্রোগ্রাম সম্পূর্ণ স্বেচ্ছাশ্রম নির্ভর।\n   এতক্ষণ যে বিষয় গুলো লিখলাম, এর পূর্বে এ বিষয়েই ইংরেজিতে একটা প্রেজেন্টেশন বানিয়েছিলাম। ইচ্ছা হলে এই লিংকে দেখতে পারেন।\n তো! আর দেরি কেন? আজই যুক্ত হোন ফায়ারফক্স স্টুডেন্ট অ্যাম্বাসেডর হিসেবে!\nযেভাবে এই প্রোগ্রামে যুক্ত হবেন:  প্রথমে এই লিংকে যান। এখানে গেলে একটা ফর্ম পাবেন। নাম, ইমেইল সহ যাবতীয় তথ্য দিয়ে Sign me up! বাটনে ক্লিক করুন। এই ফরমে School নামের একটা ঘর আছে। ঘাবড়াবেন না। এখানে আপনার কলেজ বা ইউনিভার্সিটির তথ্য দিতে হবে। আপনার ইমেইলে একটা কনফার্মেশন ইমেইল আসবে। আপনাকে FSA Beginner’s Guide এবং FSA wiki পড়তে বলা হবে। মনযোগ দিয়ে পড়ে ফেলুন। বিস্তারিত অনেক কিছু জানতে পারবেন। এরপর কী করণীয় নিজেই বুঝতে পারবেন। তবুও লিখছি। মজিলা বাংলাদেশের মেইলিং লিস্টে যোগ দিন। ফেসবুকে মজিলা বাংলাদেশ ও ফায়ারফক্স স্টুডেন্ট অ্যাম্বাসেডর, বাংলাদেশ গ্রুপ দুটিতে যোগ দিন। এখন আপনার কাজ হল আপনার প্রতিষ্ঠানের ফায়ারফক্স ক্লাবে যোগ দেয়া। এখান থেকে আপনার প্রতিষ্ঠানের ফায়ারফক্স ক্লাব খুঁজে বের করে, ক্লাবের সাথে সোশাল মিডিয়ায়(মূলত ফেসবুক গ্রুপ) যোগ দিন। প্রতিষ্ঠানে পূর্বে ফায়ারফক্স ক্লাব না থাকলে, এই উইকি ফলো করে ক্লাব খুলে ফেলতে পারেন। ফেসবুকে মজিলা বাংলাদেশ গ্রুপের ফায়ারফক্স স্টুডেন্ট অ্যাম্বাসেডর লিস্টে নিজের নামটি IRC নিকসহ যোগ করে দিন। IRC সম্পর্কে পূর্বে না জেনে থাকলে এখানে দেখুন। irc.mozilla.org সার্ভারের #Bangladesh রুমে মজিলা বাংলাদেশের মিটিং হয়ে থাকে। মিটিং সম্পর্কে ইমেইলে কিংবা গ্রুপে জানতে পারবেন।  অভিনন্দন! আপনি সমস্ত কাজ সফল ভাবে শেষ করেছেন। আপনি এখন থেকে একজন গর্বিত ফায়ারফক্স স্টুডেন্ট অ্যাম্বাসেডর(FSA)।\nকোন প্রশ্ন থাকলে মজিলা বাংলাদেশ বা ফায়ারফক্স স্টুডেন্ট অ্যাম্বাসেডর, বাংলাদেশ গ্রুপে মন খুলে করে ফেলুন। মনে রাখবেন, আপনি কখনোই একা নন 🙂 ।\nFSA দের কাজ এই পোস্টে পূর্বেই বলা হয়েছে। আপনার কাজও তাই। নিয়মিত ক্লাবের মিটিংয়ে উপস্থিত থেকে ক্লাবের কর্মপরিকল্পনা ঠিক করুন। অন্যান্য ক্লাব গুলো কি করছে খেয়াল করুন। এতে আপনার ক্লাবের কর্মপরিকল্পনা ঠিক করতে সুবিধা হবে। সব সময় মজিলা বাংলাদেশ কমিউনিটির সাথে যুক্ত থাকুন। চোখ রাখুন মজিলা বাংলাদেশ ব্লগে। বিভিন্ন ভাবে কন্ট্রিবিউট করা শুরু করে দিন মজিলায়। দেখুন, আপনি মজিলার জন্য কি কি করতে পারেন!\nভাল থাকুন, আর মজিলার সাথেই থাকুন 🙂\n","description":"","tags":["FSA","ফায়ারফক্স","মজিলা","স্টুডেন্ট"],"title":"ফায়ারফক্স স্টুডেন্ট অ্যাম্বাসেডর : কী, কেন এবং কীভাবে!","uri":"/firefox-student-ambassador-what-why-how-in-bangla/"},{"categories":null,"content":"Email: fazlerabby7 [at] gmail . com\nLinkedIn: https://www.linkedin.com/in/fazlerabby7/\n","description":"","tags":null,"title":"Contact","uri":"/contact/"}]
